

# **Problem Statement 1: Containerization and Deployment of Wisecow Application on Kubernetes**

---

## **Step 1: Dockerization**

**Dockerfile**  
The following Dockerfile is used to containerize the Wisecow application:

```Dockerfile
# Base Image
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Copy application code
COPY . /app

# Install required Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Expose the application port
EXPOSE 5000

# Start the application
CMD ["python", "app.py"]
```

**Commands to Build and Test**:  
1. Build the Docker image:  
   ```bash
   docker build -t wisecow-app:latest .
   ```  
2. Run the container locally:  
   ```bash
   docker run -p 5000:5000 wisecow-app:latest
   ```  
3. Test the app on `http://localhost:5000`.

---

## **Step 2: Kubernetes Deployment**

### **1. Deployment Manifest (`deployment.yaml`)**  
This file defines the Kubernetes Deployment for the Wisecow app.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wisecow-deployment
  labels:
    app: wisecow
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wisecow
  template:
    metadata:
      labels:
        app: wisecow
    spec:
      containers:
      - name: wisecow-container
        image: wisecow-app:latest
        ports:
        - containerPort: 5000
```

### **2. Service Manifest (`service.yaml`)**  
Expose the app using a Kubernetes Service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wisecow-service
spec:
  selector:
    app: wisecow
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer
```

---

## **Step 3: GitHub Actions CI/CD Pipeline**

### **GitHub Actions Workflow File**

Create the following `.github/workflows/ci-cd-pipeline.yml`:

```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/wisecow-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.26.0

      - name: Apply Kubernetes Manifests
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
```

**Steps to Set Up**:
1. Add **Docker Hub credentials** as secrets (`DOCKER_USERNAME`, `DOCKER_PASSWORD`).
2. Add a Kubernetes cluster configuration as `KUBECONFIG` secret.

---

## **Step 4: TLS Configuration**

To enable TLS, you can use **cert-manager** to create and manage TLS certificates.

1. Install cert-manager:  
   ```bash
   kubectl apply -f https://github.com/jetstack/cert-manager/releases/latest/download/cert-manager.yaml
   ```

2. Modify the `Service` to create an Ingress with TLS:  
   ```yaml
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     name: wisecow-ingress
     annotations:
       cert-manager.io/cluster-issuer: "letsencrypt-prod"
   spec:
     tls:
     - hosts:
       - example.com
       secretName: wisecow-tls
     rules:
     - host: example.com
       http:
         paths:
         - path: /
           pathType: Prefix
           backend:
             service:
               name: wisecow-service
               port:
                 number: 80
   ```

3. Set up a **ClusterIssuer** for Let's Encrypt.

---

# **Problem Statement 2: Script Solutions**

Here are scripts for **two chosen objectives**.

---

## **Objective 1: System Health Monitoring Script**

This script monitors CPU, memory, disk usage, and running processes.

**Script (system_health.sh):**

```bash
#!/bin/bash

# Thresholds
CPU_THRESHOLD=80
MEM_THRESHOLD=80
DISK_THRESHOLD=80

echo "----- System Health Monitoring -----"

# CPU Usage
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')
echo "CPU Usage: $CPU_USAGE%"
if (( $(echo "$CPU_USAGE > $CPU_THRESHOLD" | bc -l) )); then
    echo "ALERT: High CPU usage!"
fi

# Memory Usage
MEM_USAGE=$(free | awk '/Mem/{printf "%.2f", $3/$2 * 100}')
echo "Memory Usage: $MEM_USAGE%"
if (( $(echo "$MEM_USAGE > $MEM_THRESHOLD" | bc -l) )); then
    echo "ALERT: High Memory usage!"
fi

# Disk Usage
DISK_USAGE=$(df / | grep / | awk '{print $5}' | sed 's/%//')
echo "Disk Usage: $DISK_USAGE%"
if [ "$DISK_USAGE" -gt "$DISK_THRESHOLD" ]; then
    echo "ALERT: Disk space running low!"
fi

# Running Processes
echo "Running Processes: $(ps -e | wc -l)"
```

**Run the Script**:  
```bash
bash system_health.sh
```

---

## **Objective 2: Application Health Checker**

This script checks if an application is running by querying its HTTP status.

**Script (app_health_check.sh):**

```bash
#!/bin/bash

# Application URL
URL="http://localhost:5000"

# Check application status
STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" $URL)

if [ "$STATUS_CODE" -eq 200 ]; then
    echo "Application is UP and running (HTTP 200)."
else
    echo "Application is DOWN. Status code: $STATUS_CODE"
fi
```

**Run the Script**:  
1. Make the script executable:  
   ```bash
   chmod +x app_health_check.sh
   ```  
2. Run the script:  
   ```bash
   bash app_health_check.sh
   ```

---

# **Conclusion**

1. **Problem Statement 1** includes Dockerfile, Kubernetes manifests, a CI/CD GitHub Actions workflow, and TLS setup using cert-manager.  
2. **Problem Statement 2** includes a **System Health Monitoring Script** and an **Application Health Checker Script** using Bash.  
